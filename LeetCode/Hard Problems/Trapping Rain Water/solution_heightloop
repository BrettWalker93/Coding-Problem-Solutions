class Solution {
public:
    int trap(vector<int>& height) {

        /*
        iterate through the vector,
        record a maximum height and its position
        when that height is exceeded or met, tally the black squares between the position and the new height (keep a running tally)
        trapped water += old max height * distance - # of black squares
        if the end of the array is reached without exceeding the height, lower by one and continue the loop until the max height is zero
        */

        int n = height.size();
        int max = 0;
        int pos = 0;
        int tally = 0;
        int total = 0;

        for (int i = 0; i < n; i++) {
            int h = height[i];             
                int add = max * (i - pos - 1) - tally;
                total += add;
                pos = i;
                tally = 0;
                max = h;
            }
            else {
                tally += h;
            }
            if (i == n - 1 and max > 1 and pos < n - 1) {
                max -= 1;
                i = pos;
                tally = 0;
            }            
        }
        return total;
    }
};
